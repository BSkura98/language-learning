service: language-learning-api
frameworkVersion: '3'

custom:
  authorizer:
    arn: ${file(./config/config.json):userPoolArn}
  dbConnection: ${file(./config/config.json):databaseConnection}

provider:
  name: aws
  runtime: nodejs14.x

  vpc: ${file(./config/config.json):vpc}
  timeout: 30

  environment:
    DB_HOST: ${self:custom.dbConnection.host}
    DB_PORT: ${self:custom.dbConnection.port}
    DB_DATABASE: ${self:custom.dbConnection.database}
    DB_USERNAME: ${self:custom.dbConnection.username}
    DB_PASSWORD: ${self:custom.dbConnection.password}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "translate:TranslateText"
            - "translate:ListLanguages"
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - "comprehend:DetectDominantLanguage"
          Resource:
            - "*"

functions:
  translate:
    handler: src/controller/translate/handler.translate
    events:
      - http:
          path: translate
          method: post
          authorizer: ${self:custom.authorizer}
          cors: true
  getSupportedLanguages:
    handler: src/controller/getSupportedLanguages/handler.getSupportedLanguages
    events:
      - http:
          path: supportedLanguages
          method: get
          authorizer: ${self:custom.authorizer}
          cors: true
  databaseConnectionTest:
    handler: src/controller/databaseConnectionTest/handler.databaseConnectionTest
    events:
      - http:
          path: databaseConnectionTest
          method: get
          authorizer: ${self:custom.authorizer}
          cors: true
  createRepetition:
    handler: src/controller/createRepetition/handler.createRepetition
    events:
      - http:
          path: repetitions
          method: post
          authorizer: ${self:custom.authorizer}
          cors: true
  deleteRepetition:
    handler: src/controller/deleteRepetition/handler.deleteRepetition
    events:
      - http:
          path: repetitions/{id}
          method: delete
          authorizer: ${self:custom.authorizer}
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-offline
  - serverless-plugin-typescript
